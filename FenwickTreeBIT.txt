//307. Range Sum Query - Mutable
Link - https://leetcode.com/problems/range-sum-query-mutable/
--Problem Statement
-Refer notes for explanation.
Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.

The update(i, val) function modifies nums by updating the element at index i to val.

Example:

Given nums = [1, 3, 5]

sumRange(0, 2) -> 9
update(1, 2)
sumRange(0, 2) -> 8
Note:

The array is only modifiable by the update function.
You may assume the number of calls to update and sumRange function is distributed evenly.

class NumArray {

    private int []BIT;
    private int []nums;
    private int size;
    public NumArray(int[] nums) {
        this.nums=nums;
        this.size=nums.length;
        BIT = new int[nums.length+1];
        for(int i=0;i<nums.length;i++){
            updateInitial(i,nums[i]);
        }
    }

    public void updateInitial(int i, int val) {
        int diff=val;
        i++;
        while(i<=size){
            BIT[i]+=diff;
            i+=Integer.lowestOneBit(i);
        }
    }

    
    public void update(int i, int val) {
        int diff=val-nums[i];
        nums[i]=val;
        i++;
        while(i<=size){
            BIT[i]+=diff;
            i+=Integer.lowestOneBit(i);
        }
    }
    
    private int prefixSum(int i){
        i++;
        int sum=0;
        while(i>0){
            sum+=BIT[i];
            i-=Integer.lowestOneBit(i);
        }
        return sum;
    }
    
    public int sumRange(int i, int j) {
        return prefixSum(j)-prefixSum(i-1);
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(i,val);
 * int param_2 = obj.sumRange(i,j);
 */
